// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/mustafadubul/product/internal/domain"
	reflect "reflect"
)

// MockHTTPService is a mock of Service interface
type MockHTTPService struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServiceMockRecorder
}

// MockHTTPServiceMockRecorder is the mock recorder for MockHTTPService
type MockHTTPServiceMockRecorder struct {
	mock *MockHTTPService
}

// NewMockHTTPService creates a new mock instance
func NewMockHTTPService(ctrl *gomock.Controller) *MockHTTPService {
	mock := &MockHTTPService{ctrl: ctrl}
	mock.recorder = &MockHTTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPService) EXPECT() *MockHTTPServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockHTTPService) Create(ctx context.Context, p *domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockHTTPServiceMockRecorder) Create(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHTTPService)(nil).Create), ctx, p)
}

// Get mocks base method
func (m *MockHTTPService) Get(ctx context.Context, id uint64) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHTTPServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPService)(nil).Get), ctx, id)
}

// Search mocks base method
func (m *MockHTTPService) Search(ctx context.Context, q *domain.Query) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockHTTPServiceMockRecorder) Search(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockHTTPService)(nil).Search), ctx, q)
}

// Update mocks base method
func (m *MockHTTPService) Update(ctx context.Context, p *domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockHTTPServiceMockRecorder) Update(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHTTPService)(nil).Update), ctx, p)
}

// Delete mocks base method
func (m *MockHTTPService) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockHTTPServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPService)(nil).Delete), ctx, id)
}
