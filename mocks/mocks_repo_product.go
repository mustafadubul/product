// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/mustafadubul/product/internal/domain"
	reflect "reflect"
)

// MockRepoProduct is a mock of Product interface
type MockRepoProduct struct {
	ctrl     *gomock.Controller
	recorder *MockRepoProductMockRecorder
}

// MockRepoProductMockRecorder is the mock recorder for MockRepoProduct
type MockRepoProductMockRecorder struct {
	mock *MockRepoProduct
}

// NewMockRepoProduct creates a new mock instance
func NewMockRepoProduct(ctrl *gomock.Controller) *MockRepoProduct {
	mock := &MockRepoProduct{ctrl: ctrl}
	mock.recorder = &MockRepoProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoProduct) EXPECT() *MockRepoProductMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockRepoProduct) Search(functions ...func() error) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range functions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepoProductMockRecorder) Search(functions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepoProduct)(nil).Search), functions...)
}

// Like mocks base method
func (m *MockRepoProduct) Like(term string) func() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", term)
	ret0, _ := ret[0].(func() error)
	return ret0
}

// Like indicates an expected call of Like
func (mr *MockRepoProductMockRecorder) Like(term interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockRepoProduct)(nil).Like), term)
}

// Between mocks base method
func (m *MockRepoProduct) Between(points []domain.Point) func() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Between", points)
	ret0, _ := ret[0].(func() error)
	return ret0
}

// Between indicates an expected call of Between
func (mr *MockRepoProductMockRecorder) Between(points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Between", reflect.TypeOf((*MockRepoProduct)(nil).Between), points)
}

// Create mocks base method
func (m *MockRepoProduct) Create(p *domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", p)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepoProductMockRecorder) Create(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoProduct)(nil).Create), p)
}

// Get mocks base method
func (m *MockRepoProduct) Get(id uint64) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepoProductMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepoProduct)(nil).Get), id)
}

// Update mocks base method
func (m *MockRepoProduct) Update(p *domain.Product) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", p)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRepoProductMockRecorder) Update(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoProduct)(nil).Update), p)
}

// Delete mocks base method
func (m *MockRepoProduct) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepoProductMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepoProduct)(nil).Delete), id)
}
